{"content": "When he was in elementary school, Scott Aaronson, like many mathematically precocious kids of his generation, dreamed of making his own video games. He had only the foggiest notion of what that entailed, however.\n\u201cI could try to imagine making my own game \u2014 I could draw a picture of what it should look like \u2014 but how does it come to life?\u201d Aaronson recalls. \u201cMaybe there\u2019s some factory where they do all kinds of complicated machining to make Mario move around in the right way. Then a friend showed me this spaceship game that he had on his computer, and he said, \u2018Here\u2019s the code.\u2019 Well, what is this? Some kind of summary of the game? \u2018No, no, this is the game. If you change the code, the spaceship will do something different.\u2019\u201d\n\u201cI like to say that for me, this was like learning where babies came from,\u201d Aaronson adds. \u201cIt was a revelation. And I was incredibly upset at my parents that they hadn\u2019t told me earlier that this exists. Because I was already 11, and other kids had known programming since they were 8, and how would I ever catch up to them?\u201d\nAs that anecdote attests, Aaronson was a young man in a hurry. Also at 11, he taught himself calculus, because he was intrigued by the mysterious symbols in a babysitter\u2019s calculus textbook. The next year, when Aaronson\u2019s father \u2014 a science writer turned public-relations executive \u2014 was transferred from Philadelphia to Hong Kong to spearhead a new marketing push by AT&T, Aaronson enrolled in an English-language school that offered him the opportunity to skip a grade and leap several years ahead in math.\nWhen he returned to the United States as a high-school freshman, however, Aaronson chafed at what he saw as the constricting dogmas of public education, getting poor grades and butting heads with teachers. So he enrolled in a yearlong program for gifted high-school students at Clarkson University, and, that winter, applied to colleges. In what would have been his junior year of high school \u2014 and over his mother\u2019s objection that he\u2019d have trouble fitting in socially \u2014 he entered Cornell University as a freshman.\nTheoretical attraction\nDespite this accelerated trajectory, however, he never lost the sense that, as a programmer, he still lagged behind his peers. At Cornell, he was part of a team of undergraduates who wrote control algorithms for robots competing in the RoboCup robotic-soccer tournament. \u201cWe won for two years, not thanks to me at all,\u201d Aaronson says. \u201cI loved the mathematical part, but when it comes to software development, when it comes to making your code work with other people\u2019s code, and documenting code, and meeting deadlines, other people were just going to be so much better at this than I was.\u201d\nThe summer before his year at Clarkson, Aaronson had attended a math camp in Seattle where he had learned about the P = NP problem \u2014 the central problem in computer science \u2014 from one of its most prominent theorists, Richard Karp. \u201cP\u201d is a set of problems that can be solved relatively quickly, and \u201cNP\u201d is a set of problems whose solutions can be verified relatively quickly. For many problems in NP, however \u2014 notably those known as \u201cNP-complete\u201d \u2014 finding solutions appears to be a prohibitively time-consuming task.\nMost mathematicians believe that P does not equal NP \u2014 that being easy to verify doesn\u2019t make a problem easy to solve. But nobody\u2019s been able to prove it.\nWhen he was working with the RoboCup team, Aaronson says, \u201csomeone would mention offhandedly that we want the goalie to be able to move this way, and I\u2019d start thinking about whether that\u2019s NP-complete. And maybe two weeks later, I\u2019d be able to prove that it\u2019s NP-complete, but by then no one cares, anyway. They\u2019ve moved on to a different way of doing it.\u201d\nAlready intrigued by theoretical questions of computational complexity, Aaronson learned from a fellow Cornell student about Shor\u2019s algorithm, perhaps the most important theoretical result in quantum computing. Quantum computers are devices, still largely hypothetical, that would harness the strange behavior of matter at extremely small scales to perform computations. Discovered by Peter Shor in 1994, Shor\u2019s algorithm is a quantum algorithm for factoring large numbers, one of the canonical NP problems that is easy to verify but apparently very hard to solve. Shockingly, Shor was able to show that for a quantum computer, solving the problem would be almost as easy as verifying it is for a classical computer.\n\u201cMy first reaction was, \u2018OK, this is probably some obvious crap that is getting hyped by the media,\u2019\u201d Aaronson says. But he had to know for sure, and he threw himself into the study of quantum computing. He came away convinced that, indeed, quantum computers would rewrite the rules of computational efficiency.\nQuantum complex\nThe relationship between complexity \u2014 the classification of algorithms according to their execution time \u2014 and quantum physics has remained at the center of Aaronson\u2019s research since. He did his graduate work at the University of California at Berkeley so that he could study with Umesh Vazirani, one of the pioneers of quantum complexity theory. And now, as a tenured professor in the Department of Electrical Engineering and Computer Science at MIT, he finds himself a colleague of Shor, who, since the announcement of his algorithm, has joined the MIT mathematics faculty.\nAaronson believes that his own most important research includes his first paper on quantum complexity theory, written when he was a graduate student, which provided the first lower bound \u2014 minimum theoretically provable execution time \u2014 for a problem known as the \u201ccollision problem.\u201d Integrally connected to the cryptographically important question of cryptographic hashing, the collision problem asks whether a given mathematical function is one-to-one \u2014 every input produces a unique output \u2014 or two-to-one \u2014 every output can be produced by either of two inputs. Although subsequent researchers raised the bound, they used a variation on the same technique that Aaronson had developed.\nAaronson and Avi Wigderson of the Institute for Advanced Study in Princeton also proved that anyone hoping to answer the question of whether P = NP must first surmount an obstacle that they called \u201calgebrization.\u201d \u201cIf you want to advance the field to where it could address the [P = NP] question, then you have to look at our current proof techniques and the barriers that are preventing them from getting us where we want,\u201d Aaronson says. \u201cThere were two previous times where we had to identify a barrier \u2014 the relativization and the natural-proofs barriers \u2014 in order to even start to think about what techniques were going to get around it.\u201d Algebrization is another such barrier. \u201cOnce you\u2019ve clearly identified what the barrier is,\u201d Aaronson says, \u201cthen your mind is much freer to think about how to get around it.\u201d\nMost recently, Aaronson and his student Alex Arkhipov described an optical experiment that, if performed successfully, could, for the first time, use quantum mechanics to execute a calculation that\u2019s infeasible with conventional computers.\nAs for whether Aaronson is more of a quantum-computing researcher or a computational-complexity researcher, he finds the question impossible to answer. \u201cOften, even when I\u2019m working on a purely classical question, it\u2019s a classical question inspired by something I\u2019m trying to do in the quantum world,\u201d Aaronson says. \u201cBut then, with quite a few of the quantum-computing problems that I\u2019ve worked on, it\u2019s ended up that the core of the difficulty was something in classical complexity theory. They\u2019re very, very linked.\u201d", "tags": ["Quantum computing", "Computational complexity theory", "P vs. NP", "Faculty", "Profile"], "title": "The complexonaut"}